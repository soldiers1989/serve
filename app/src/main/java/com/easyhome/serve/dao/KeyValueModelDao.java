package com.easyhome.serve.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.easyhome.serve.mvp.model.entity.KeyValueModel;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY_VALUE_MODEL".
*/
public class KeyValueModelDao extends AbstractDao<KeyValueModel, String> {

    public static final String TABLENAME = "KEY_VALUE_MODEL";

    /**
     * Properties of entity KeyValueModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
    }


    public KeyValueModelDao(DaoConfig config) {
        super(config);
    }
    
    public KeyValueModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY_VALUE_MODEL\" (" + //
                "\"KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: key
                "\"VALUE\" TEXT NOT NULL );"); // 1: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY_VALUE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyValueModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
        stmt.bindString(2, entity.getValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyValueModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
        stmt.bindString(2, entity.getValue());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public KeyValueModel readEntity(Cursor cursor, int offset) {
        KeyValueModel entity = new KeyValueModel( //
            cursor.getString(offset + 0), // key
            cursor.getString(offset + 1) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyValueModel entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setValue(cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(KeyValueModel entity, long rowId) {
        return entity.getKey();
    }
    
    @Override
    public String getKey(KeyValueModel entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeyValueModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
